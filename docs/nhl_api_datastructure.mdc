# NHL API Data Structure and Retrieval System Documentation

## **REGULAR SEASON ONLY FILTERING**

**This system is configured to collect ONLY regular season NHL games (gameType == 2).**

- **✅ Regular Season Games (gameType == 2)**: Collected and processed
- **❌ Preseason Games (gameType == 1)**: Automatically filtered out
- **❌ Playoff Games (gameType == 3)**: Automatically filtered out

The filtering is applied at the game collection level in `src/collect/data_collector.py` to ensure only relevant regular season data is stored and processed.

## Project Structure

```
nhl_apishift_v2/
├── main.py                     # Main entry point with step-based processing
├── config/                     # Configuration files
│   ├── __init__.py
│   ├── nhl_config.py          # NHL API configuration and endpoints
│   └── config.py              # Enhanced configuration system
├── src/                       # Source code modules
│   ├── __init__.py
│   ├── collect/               # Data collection modules
│   │   ├── __init__.py
│   │   ├── data_collector.py  # Main data collector for JSON APIs
│   │   ├── html_collector.py  # HTML report collector
│   │   ├── collect_json.py    # Step 1: JSON data collection
│   │   ├── collect_html.py    # Step 2: HTML report collection
│   │   ├── shift_charts_collector.py # Shift charts collection
│   │   └── collector.py       # Enhanced data collector
│   ├── curate/                # Data curation and processing
│   │   ├── __init__.py
│   │   ├── player_team_goal_reconciliation.py # Goal data reconciliation
│   │   ├── penalty_data_analysis.py # Penalty data analysis
│   │   ├── goal_reconciliation_system.py # Comprehensive goal reconciliation
│   │   └── reconciliation/    # Reconciliation utilities
│   ├── parse/                 # Data parsing modules
│   │   └── html_report_parser.py # HTML report parsing
│   ├── model/                 # Data models and schemas
│   │   ├── __init__.py
│   │   └── shift_charts.py    # Shift charts data models
│   ├── transform/             # Data transformation modules
│   │   └── __init__.py
│   └── utils/                 # Utility modules
│       ├── __init__.py
│       ├── storage.py         # CSV storage management
│       ├── validator.py       # Data validation utilities
│       └── reference_data.py  # Reference data loading
├── storage/                   # Data storage directory (season-first structure)
│   ├── {season}/              # Season-specific data (e.g., 20242025)
│   │   ├── json/              # Raw JSON data from APIs
│   │   │   ├── boxscores/     # Game boxscore data
│   │   │   ├── gamecenter_landing/ # Game overview and summary data
│   │   │   ├── playbyplay/    # Play-by-play data (authoritative for goal data)
│   │   │   ├── shiftcharts/   # Shift charts data
│   │   │   ├── games.json     # Season schedule data
│   │   │   ├── players.json   # Season player information
│   │   │   └── teams.json     # Season team data (season-specific)
│   │   ├── html/reports/      # HTML reports (HTM files)
│   │   │   ├── ES/            # Event Summary reports
│   │   │   ├── FC/            # Faceoff Comparison reports
│   │   │   ├── FS/            # Faceoff Summary reports
│   │   │   ├── GS/            # Game Summary reports
│   │   │   ├── PL/            # Play-by-Play reports
│   │   │   ├── RO/            # Roster reports
│   │   │   ├── SC/            # Shift Chart reports
│   │   │   ├── SS/            # Shot Summary reports
│   │   │   ├── TV/            # Time on Ice Away reports
│   │   │   └── TH/            # Time on Ice Home reports
│   │   ├── json/curate/       # Curated HTML report JSON files
│   │   │   ├── gs/            # Game Summary JSON files (gs_{gameNumber}.json)
│   │   │   ├── es/            # Event Summary JSON files (es_{gameNumber}.json)
│   │   │   ├── pl/            # Play-by-Play JSON files (pl_{gameNumber}.json)
│   │   │   ├── ro/            # Roster JSON files (ro_{gameNumber}.json)
│   │   │   ├── fs/            # Faceoff Summary JSON files (fs_{gameNumber}.json)
│   │   │   ├── th/            # Time on Ice Home JSON files (th_{gameNumber}.json)
│   │   │   └── tv/            # Time on Ice Away JSON files (tv_{gameNumber}.json)
│   │   └── csv/curate/        # Legacy curated data files
│   │       └── html_data_{gameId}.json # Full parsed game data
│   ├── global/                # Cross-season data
│   │   ├── seasons.json       # Historical seasons list
│   │   └── logs/              # Application logs
│   └── processed/             # Cross-season processed data
└── nhl_api_datastructure.mdc # This documentation file
```

## Step-Based Processing Architecture

The system implements a modular step-based processing pipeline:

1. **step_01_collect_json** - Collect JSON data from NHL API endpoints
2. **step_02_collect_html** - Collect HTML reports from NHL.com
3. **step_03_curate** - Process and curate collected data
4. **step_04_validate** - Validate data integrity and quality
5. **step_05_transform** - Transform data for analysis (optional)
6. **step_06_export** - Export data to various formats (optional)

## Usage Examples

### Run full pipeline for 2024-2025 season:
```bash
python main.py --mode full --seasons 20242025
```

### Run specific steps:
```bash
python main.py --mode step --step step_01_collect_json --seasons 20242025
python main.py --mode step --steps step_01_collect_json step_02_collect_html --seasons 20242025
```

### Run individual step modules:
```bash
python -m src.collect.collect_json --seasons 20242025 --verbose
python -m src.collect.collect_html --seasons 20242025 --verbose
```

### Run data reconciliation:
```bash
# Goal data reconciliation
python src/curate/player_team_goal_reconciliation.py --game-id 2024020001
python src/curate/player_team_goal_reconciliation.py --all-games

# Penalty data analysis
python src/curate/penalty_data_analysis.py --game-id 2024020001

# Comprehensive goal reconciliation
python src/curate/goal_reconciliation_system.py --game-id 2024020001
```

# Original NHL API Data Structure Documentation

## Overview

This document describes the complete data structure and API endpoints required to extract every statistic and supplementary dataset associated with the NHL API, based on the analysis of the NHLapiV3 repository. The repository implements a comprehensive hockey game prediction model using Graph Neural Networks that requires extensive data collection from multiple NHL API endpoints.

## Base API Configuration

### Base URLs
- **Primary API**: `https://api-web.nhle.com`

### Headers
```json
{
  "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Safari/537.36"
}
```

## Core API Endpoints

### 1. Seasons Data
**Endpoint**: `{base_url}/v1/season`
**Purpose**: Retrieve all available NHL seasons
**Data Structure**:
```json
[
  {
    "id": 20232024,
    "name": "2023-24",
    "type": "regular"
  }
]
```

### 2. Team Standings
**Endpoint**: `{base_url}/v1/standings/now`
**Purpose**: Get current team standings and team information
**Data Structure**:
```json
{
  "standings": [
    {
      "teamAbbrev": {
        "default": "BOS"
      },
      "teamName": {
        "default": "Boston Bruins"
      },
      "teamId": 6,
      "conferenceName": "Eastern",
      "divisionName": "Atlantic",
      "gamesPlayed": 82,
      "wins": 47,
      "losses": 20,
      "otLosses": 15,
      "points": 109,
      "pointPctg": 0.665,
      "goalsFor": 263,
      "goalsAgainst": 218,
      "goalDiff": 45
    }
  ]
}
```

### 3. Team Schedule
**Endpoint**: `{base_url}/v1/club-schedule-season/{team}/{season}`
**Purpose**: Get complete schedule for a specific team in a specific season
**Parameters**:
- `team`: Team abbreviation (e.g., "BOS")
- `season`: Season ID (e.g., "20232024")
**Data Structure**:
```json
{
  "games": [
    {
      "id": 2023020001,
      "gameDate": "2023-10-10",
      "gameType": 2,
      "homeTeam": {
        "abbrev": "BOS",
        "name": {
          "default": "Boston Bruins"
        }
      },
      "awayTeam": {
        "abbrev": "CHI",
        "name": {
          "default": "Chicago Blackhawks"
        }
      },
      "gameState": "OFF",
      "periodDescriptor": {
        "number": 3,
        "periodType": "REG"
      }
    }
  ]
}
```

### 4. Boxscore Data (Version 1)
**Endpoint**: `{base_url}/v1/gamecenter/{game_id}/boxscore`
**Purpose**: Get detailed boxscore statistics for a specific game
**Parameters**:
- `game_id`: Unique game identifier
**Data Structure**:
```json
{
  "id": 2023020001,
  "gameDate": "2023-10-10",
  "gameState": "OFF",
  "awayTeam": {
    "abbrev": "CHI",
    "name": {
      "default": "Chicago Blackhawks"
    }
  },
  "homeTeam": {
    "abbrev": "BOS",
    "name": {
      "default": "Boston Bruins"
    }
  },
  "playerByGameStats": {
    "awayTeam": {
      "forwards": [
        {
          "playerId": 8478402,
          "sweaterNumber": 88,
          "goals": 0,
          "assists": 0,
          "points": 0,
          "plusMinus": -1,
          "pim": 0,
          "hits": 2,
          "powerPlayGoals": 0,
          "sog": 3,
          "faceoffWinningPctg": 0.0,
          "toi": "15:23"
        }
      ],
      "defense": [...],
      "goalies": [
        {
          "playerId": 8476883,
          "sweaterNumber": 34,
          "evenStrengthShotsAgainst": 25,
          "powerPlayShotsAgainst": 3,
          "shorthandedShotsAgainst": 0,
          "saveShotsAgainst": 28,
          "evenStrengthGoalsAgainst": 2,
          "powerPlayGoalsAgainst": 1,
          "shorthandedGoalsAgainst": 0,
          "goalsAgainst": 3,
          "toi": "60:00"
        }
      ]
    },
    "homeTeam": {
      "forwards": [...],
      "defense": [...],
      "goalies": [...]
    }
  }
}
```

### 5. Boxscore Data (Version 2)
**Endpoint**: `{base_url}/v1/gamecenter/{game_id}/right-rail`
**Purpose**: Get additional game statistics and play-by-play URL
**Parameters**:
- `game_id`: Unique game identifier
**Data Structure**:
```json
{
  "linescore": {
    "totals": {
      "home": 3,
      "away": 1
    }
  },
  "gameReports": {
    "playByPlay": "https://www.nhl.com/gamecenter/2023020001"
  },
  "teamGameStats": [
    {
      "category": "sog",
      "homeValue": 28,
      "awayValue": 25
    },
    {
      "category": "powerPlayPctg",
      "homeValue": 33.3,
      "awayValue": 0.0
    },
    {
      "category": "giveaways",
      "homeValue": 8,
      "awayValue": 12
    },
    {
      "category": "takeaways",
      "homeValue": 6,
      "awayValue": 4
    },
    {
      "category": "hits",
      "homeValue": 22,
      "awayValue": 18
    },
    {
      "category": "blockedShots",
      "homeValue": 15,
      "awayValue": 12
    },
    {
      "category": "pim",
      "homeValue": 4,
      "awayValue": 6
    },
    {
      "category": "faceoffWinningPctg",
      "homeValue": 52.4,
      "awayValue": 47.6
    },
    {
      "category": "powerPlay",
      "homeValue": "1/3",
      "awayValue": "0/2"
    }
  ]
}
```

### 6. Player Information
**Endpoint**: `{base_url}/v1/player/{player_id}/landing`
**Purpose**: Get detailed player information and statistics
**Parameters**:
- `player_id`: Unique player identifier
**Data Structure**:
```json
{
  "playerId": 8478402,
  "firstName": {
    "default": "Patrick"
  },
  "lastName": {
    "default": "Kane"
  },
  "sweaterNumber": 88,
  "positionCode": "R",
  "shootsCatches": "L",
  "heightInInches": 71,
  "weightInPounds": 177,
  "birthDate": "1988-11-19",
  "birthCity": {
    "default": "Buffalo"
  },
  "birthCountry": "USA",
  "currentTeam": {
    "id": 6,
    "abbrev": "BOS"
  }
}
```

### 7. Team Roster
**Endpoint**: `{base_url}/v1/roster/{team}/current`
**Purpose**: Get current roster for a specific team
**Parameters**:
- `team`: Team abbreviation (e.g., "BOS")
**Data Structure**:
```json
{
  "roster": [
    {
      "playerId": 8478402,
      "firstName": {
        "default": "Patrick"
      },
      "lastName": {
        "default": "Kane"
      },
      "sweaterNumber": 88,
      "positionCode": "R",
      "shootsCatches": "L",
      "heightInInches": 71,
      "weightInPounds": 177,
      "birthDate": "1988-11-19",
      "birthCity": {
        "default": "Buffalo"
      },
      "birthCountry": "USA"
    }
  ]
}
```

### 8. Play-by-Play Data
**Endpoint**: `{base_url}/v1/gamecenter/{game_id}/play-by-play`
**Purpose**: Get detailed play-by-play events and game roster
**Parameters**:
- `game_id`: Unique game identifier
**Data Structure**:
```json
{
  "id": 2023020001,
  "gameDate": "2023-10-10",
  "awayTeam": {
    "id": 16,
    "abbrev": "CHI"
  },
  "homeTeam": {
    "id": 6,
    "abbrev": "BOS"
  },
  "rosterSpots": [
    {
      "playerId": 8478402,
      "firstName": {
        "default": "Patrick"
      },
      "lastName": {
        "default": "Kane"
      },
      "sweaterNumber": 88,
      "positionCode": "R",
      "teamId": 16
    }
  ],
  "plays": [
    {
      "eventId": 1,
      "periodDescriptor": {
        "number": 1,
        "periodType": "REG"
      },
      "timeInPeriod": "00:00",
      "timeRemaining": "20:00",
      "typeCode": 502,
      "typeDescKey": "faceoff",
      "details": {
        "winningPlayerId": 8478402,
        "losingPlayerId": 8478403,
        "xCoord": 0,
        "yCoord": 0
      }
    },
    {
      "eventId": 2,
      "periodDescriptor": {
        "number": 1,
        "periodType": "REG"
      },
      "timeInPeriod": "00:15",
      "timeRemaining": "19:45",
      "typeCode": 503,
      "typeDescKey": "hit",
      "details": {
        "hittingPlayerId": 8478404,
        "hitteePlayerId": 8478405,
        "xCoord": 25,
        "yCoord": -15
      }
    },
    {
      "eventId": 3,
      "periodDescriptor": {
        "number": 1,
        "periodType": "REG"
      },
      "timeInPeriod": "01:23",
      "timeRemaining": "18:37",
      "typeCode": 505,
      "typeDescKey": "goal",
      "details": {
        "scoringPlayerId": 8478402,
        "assist1PlayerId": 8478403,
        "assist2PlayerId": 8478404,
        "goalieInNetId": 8478406,
        "xCoord": 0,
        "yCoord": 0
      }
    }
  ]
}
```

### 9. HTML Reports (Comprehensive Game Data)
The NHL provides comprehensive HTML reports for each game that contain detailed statistics and information. These reports are accessible via direct URLs and provide granular data not available through the JSON API.

#### Base URL Pattern
```
https://www.nhl.com/scores/htmlreports/{season}/{reportType}{gameId}.HTM
```

Where:
- `{season}`: Season identifier (e.g., `20242025` for 2024-2025 season)
- `{reportType}`: Report type code (see below)
- `{gameId}`: Game ID (e.g., `020489` for game 2024020489)

#### Available Report Types

| Report Type | Code | Description | Content | Status |
|-------------|------|-------------|---------|---------|
| Game Summary | `GS` | Overall game summary and key statistics | Final score, period breakdown, team stats | ✅ Available |
| Event Summary | `ES` | Detailed event log and penalties | All game events, penalties, timeouts | ✅ Available |
| Play-by-Play | `PL` | Complete play-by-play description | Detailed description of every play | ✅ Available |
| Faceoff Summary | `FS` | Faceoff statistics by player | Faceoff wins/losses, percentages | ✅ Available |
| Faceoff Comparison | `FC` | Faceoff comparison between teams | Team faceoff statistics | ✅ Available |
| Rosters | `RO` | Complete team rosters | Player information, lineups | ✅ Available |
| Shot Summary | `SS` | Shot statistics and locations | Shot attempts, goals, saves | ✅ Available |
| Time on Ice Away | `TV` | Away team time on ice statistics | TOI for away team players | ✅ Available |
| Time on Ice Home | `TH` | Home team time on ice statistics | TOI for home team players | ✅ Available |

#### Time on Ice Reports (TV/TH)
**CORRECTED**: Time on Ice reports are available but use **TV** (Away Team) and **TH** (Home Team) codes, not **TO**.

```
https://www.nhl.com/scores/htmlreports/{season}/TV{gameId}.HTM  # Away team TOI
https://www.nhl.com/scores/htmlreports/{season}/TH{gameId}.HTM  # Home team TOI
```

**Status**: ✅ Available (both TV and TH reports)
**Content**: Detailed Time on Ice statistics for each team's players
**Format**: HTML with structured data tables
**Source**: Available in right-rail data as `toiAway` and `toiHome` URLs

#### Shift Charts (Additional Time on Ice Data)
Shift Charts provide complementary Time on Ice data in a different format:

```
https://www.nhl.com/stats/shiftcharts?id={gameId}
```

**Status**: ✅ Available and contains Time on Ice data
**Content**: Player shift data, ice time statistics, and detailed TOI information
**Format**: HTML with structured data tables

#### HTML Report Examples

**Example Game**: NYI vs CHI (Game ID: 2024020489)
**Season**: 20242025  
**Game ID**: 020489

```bash
# Game Summary
curl "https://www.nhl.com/scores/htmlreports/20242025/GS020489.HTM"

# Event Summary
curl "https://www.nhl.com/scores/htmlreports/20242025/ES020489.HTM"

# Play-by-Play
curl "https://www.nhl.com/scores/htmlreports/20242025/PL020489.HTM"

# Faceoff Summary
curl "https://www.nhl.com/scores/htmlreports/20242025/FS020489.HTM"

# Faceoff Comparison
curl "https://www.nhl.com/scores/htmlreports/20242025/FC020489.HTM"

# Rosters
curl "https://www.nhl.com/scores/htmlreports/20242025/RO020489.HTM"

# Shot Summary
curl "https://www.nhl.com/scores/htmlreports/20242025/SS020489.HTM"

# Time on Ice Away Team
curl "https://www.nhl.com/scores/htmlreports/20242025/TV020489.HTM"

# Time on Ice Home Team  
curl "https://www.nhl.com/scores/htmlreports/20242025/TH020489.HTM"

# Shift Charts (Additional Time on Ice Data)
curl "https://www.nhl.com/stats/shiftcharts?id=2024020489"
```

#### HTML Report Content Structure

The HTML reports contain structured data in table format with the following characteristics:

- **Content-Type**: `text/html; charset=UTF-8`
- **Server**: Cloudflare
- **Access-Control-Allow-Origin**: `*` (CORS enabled)
- **Last-Modified**: Timestamp of when the report was last updated

#### Sample HTML Report Content

```html
<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Event Summary</title>
</head>
<style type="text/css">
    /* CSS styling for report formatting */
    p, td {font-family: arial,verdana; font-size: 10px;}
    .title {font-weight:bold;font-size:14px;}
    .sectionheading{font-weight:bold;background-color: #E7E7E7;color:#000000;}
    /* Additional styling... */
</style>
<body>
    <!-- Game information and statistics tables -->
    <table id="GameInfo" border="0" cellpadding="0" cellspacing="0" align="center">
        <tr>
            <td style="font-size: 14px;font-weight:bold" align="center">Event Summary</td>
        </tr>
        <!-- Detailed game data... -->
    </table>
</body>
</html>
```

#### HTML Report Data Extraction

The HTML reports contain valuable data that can be extracted for analysis. **BeautifulSoup** should be used for parsing and extracting data from these HTML files due to their structured table format and consistent markup.

```python
from bs4 import BeautifulSoup
import requests

def fetch_html_report(season: str, report_type: str, game_id: str) -> BeautifulSoup:
    """
    Fetch and parse HTML report using BeautifulSoup
    
    Args:
        season: Season identifier (e.g., '20242025')
        report_type: Report type code (e.g., 'GS', 'ES', 'PL')
        game_id: Game ID (e.g., '020489')
    
    Returns:
        BeautifulSoup object for parsing
    """
    url = f"https://www.nhl.com/scores/htmlreports/{season}/{report_type}{game_id}.HTM"
    response = requests.get(url)
    response.raise_for_status()
    
    # Parse with BeautifulSoup using html.parser
    soup = BeautifulSoup(response.content, 'html.parser')
    return soup

def extract_table_data(soup: BeautifulSoup, table_id: str = None, table_class: str = None) -> List[Dict[str, str]]:
    """
    Extract data from HTML tables
    
    Args:
        soup: BeautifulSoup object of the HTML report
        table_id: ID of the table to extract
        table_class: Class of the table to extract
    
    Returns:
        List of dictionaries containing table data
    """
    data = []
    
    # Find table by ID or class
    if table_id:
        table = soup.find('table', {'id': table_id})
    elif table_class:
        table = soup.find('table', {'class': table_class})
    else:
        table = soup.find('table')
    
    if table:
        rows = table.find_all('tr')
        headers = [th.get_text(strip=True) for th in rows[0].find_all(['th', 'td'])]
        
        for row in rows[1:]:  # Skip header row
            cells = row.find_all('td')
            if len(cells) >= len(headers):
                row_data = {}
                for i, cell in enumerate(cells):
                    if i < len(headers):
                        row_data[headers[i]] = cell.get_text(strip=True)
                data.append(row_data)
    
    return data
```

#### HTML Report Data Types

The HTML reports contain valuable data that can be extracted for analysis:

1. **Game Summary (GS)**: Final scores, period breakdowns, team statistics
2. **Event Summary (ES)**: Complete event log, penalties, timeouts, game flow
3. **Play-by-Play (PL)**: Detailed descriptions of every play and event
4. **Faceoff Data (FS/FC)**: Faceoff statistics by player and team
5. **Rosters (RO)**: Complete player information and lineups
6. **Shot Data (SS)**: Shot locations, types, and outcomes
7. **Time on Ice (TV/TH)**: Player ice time statistics
8. **Shift Charts**: Visual representation of player shifts

#### BeautifulSoup Implementation Benefits

- **Structured Parsing**: HTML reports use consistent table structures that BeautifulSoup handles efficiently
- **Error Handling**: Robust parsing even with minor HTML inconsistencies
- **Data Extraction**: Easy extraction of specific data elements using CSS selectors and find methods
- **Text Processing**: Built-in text cleaning and normalization

#### Integration with Right-Rail Data

The HTML reports are referenced in the `gameReports` section of the right-rail data:

```json
{
  "gameReports": {
    "gameSummary": "https://www.nhl.com/scores/htmlreports/20242025/GS020489.HTM",
    "eventSummary": "https://www.nhl.com/scores/htmlreports/20242025/ES020489.HTM",
    "playByPlay": "https://www.nhl.com/scores/htmlreports/20242025/PL020489.HTM",
    "faceoffSummary": "https://www.nhl.com/scores/htmlreports/20242025/FS020489.HTM",
    "faceoffComparison": "https://www.nhl.com/scores/htmlreports/20242025/FC020489.HTM",
    "rosters": "https://www.nhl.com/scores/htmlreports/20242025/RO020489.HTM",
    "shotSummary": "https://www.nhl.com/scores/htmlreports/20242025/SS020489.HTM",
    "shiftChart": "https://www.nhl.com/stats/shiftcharts?id=2024020489",
    "toiAway": "https://www.nhl.com/scores/htmlreports/20242025/TV020489.HTM",
    "toiHome": "https://www.nhl.com/scores/htmlreports/20242025/TH020489.HTM"
  }
}
```



## Data Processing Pipeline

### 1. Data Collection Sequence
The repository follows this specific order for data collection:

1. **Seasons** → Get all available seasons
2. **Teams** → Get team list from standings
3. **Games** → Get schedule for each team-season combination → **FILTER for regular season only (gameType == 2)**
4. **Boxscores** → Get detailed game statistics (regular season games only)
5. **Player Names** → Get player information
6. **Play-by-Play** → Get detailed game events and shifts (regular season games only)
7. **HTML Reports** → Get comprehensive game reports (regular season games only)
8. **Shift Charts** → Get visual shift data and player ice time (regular season games only)

**Filtering Note**: Game type filtering is applied at step 3, ensuring all subsequent steps only process regular season games.

### 2. Collection Success Rates
Success rates are calculated dynamically during collection and vary based on:
- API availability and rate limiting
- Network conditions  
- Game data availability
- System performance

Real-time success rates are displayed during collection and logged for analysis. Failed collections are typically due to temporary API issues, rate limiting, or network timeouts. Failed games are usually accessible on retry.

**Rate Limiting**: System implements conservative rate limiting (500ms between requests) to ensure API stability.

### 3. Data Storage Structure
The repository uses JSON files for primary data storage with the following structure:

```
storage/
├── {season}/                  # Season-specific data (e.g., 20242025)
│   ├── json/                  # Raw JSON data from APIs
│   │   ├── boxscores/         # Game boxscore data
│   │   ├── gamecenter_landing/ # Game overview and summary data
│   │   ├── playbyplay/        # Play-by-play data (authoritative for goal data)
│   │   ├── shiftcharts/       # Shift charts data
│   │   ├── games.json         # Season schedule data
│   │   ├── players.json       # Season player information
│   │   └── teams.json         # Season team data (season-specific)
│   ├── html/reports/          # HTML reports (HTM files)
│   │   ├── GS/                # Game Summary reports
│   │   ├── ES/                # Event Summary reports
│   │   ├── PL/                # Play-by-Play reports
│   │   ├── FS/                # Faceoff Summary reports
│   │   ├── FC/                # Faceoff Comparison reports
│   │   ├── RO/                # Roster reports
│   │   ├── SS/                # Shot Summary reports
│   │   ├── TV/                # Time on Ice Away reports
│   │   └── TH/                # Time on Ice Home reports
│   ├── json/curate/           # Curated HTML report JSON files
│   │   ├── gs/                # Game Summary JSON files
│   │   ├── es/                # Event Summary JSON files
│   │   ├── pl/                # Play-by-Play JSON files
│   │   ├── ro/                # Roster JSON files
│   │   ├── fs/                # Faceoff Summary JSON files
│   │   ├── th/                # Time on Ice Home JSON files
│   │   ├── tv/                # Time on Ice Away JSON files
│   │   └── reconciliation/    # Goal reconciliation reports
│   └── csv/curate/            # Legacy curated data files
│       └── html_data_{gameId}.json # Full parsed game data
├── global/                    # Cross-season data
│   ├── seasons.json           # Historical seasons list
│   └── logs/                  # Application logs
└── processed/                 # Cross-season processed data
```

### 4. Core Data Classes

#### Enhanced Data Structures with Pydantic Models

For type safety and validation, the following Pydantic models can be used:

```python
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
from datetime import datetime
from enum import Enum

class GameSituation(Enum):
    EVEN_STRENGTH = "even_strength"
    POWER_PLAY = "power_play"
    PENALTY_KILL = "penalty_kill"
    EMPTY_NET = "empty_net"
    PULLED_GOALIE = "pulled_goalie"

class Team(BaseModel):
    id: int
    franchise_id: Optional[int]
    full_name: str
    league_id: int
    raw_tricode: str
    tri_code: str

class TeamStats(BaseModel):
    team_id: int
    team_full_name: str
    season_id: int
    games_played: int
    wins: int
    losses: int
    ot_losses: int
    points: int
    point_pct: float
    goals_for: int
    goals_for_per_game: float
    goals_against: int
    goals_against_per_game: float
    power_play_pct: float
    penalty_kill_pct: float
    faceoff_win_pct: float
    shots_for_per_game: float
    shots_against_per_game: float

class SkaterStats(BaseModel):
    player_id: int
    skater_full_name: str
    last_name: str
    team_abbrevs: str
    position_code: str
    shoots_catches: str
    season_id: int
    games_played: int
    goals: int
    assists: int
    points: int
    points_per_game: float
    plus_minus: int
    penalty_minutes: int
    shots: int
    shooting_pct: float
    time_on_ice_per_game: float
    ev_goals: int
    ev_points: int
    pp_goals: int
    pp_points: int
    sh_goals: int
    sh_points: int
    game_winning_goals: int
    ot_goals: int
    faceoff_win_pct: Optional[float]

class GoalieStats(BaseModel):
    player_id: int
    goalie_full_name: str
    last_name: str
    team_abbrevs: str
    shoots_catches: str
    season_id: int
    games_played: int
    games_started: int
    wins: int
    losses: int
    ot_losses: int
    goals_against: int
    goals_against_average: float
    saves: int
    shots_against: int
    save_pct: float
    shutouts: int
    time_on_ice: int
    assists: int
    goals: int
    points: int
    penalty_minutes: int

@dataclass
class NHLEvent:
    """Base NHL event structure"""
    event_id: int
    period_descriptor: Dict[str, Any]
    time_in_period: str  # "MM:SS" format
    time_remaining: str  # "MM:SS" format
    situation_code: str  # 4-digit situation code
    home_team_defending_side: str  # "left" or "right"
    type_code: int  # Event type code
    type_desc_key: str  # Event description key
    sort_order: int
    details: Optional[Dict[str, Any]] = None
```

#### Data Storage Benefits

The JSON-based storage system provides:
- **Data Integrity**: Raw API responses preserved for accuracy
- **Structured Access**: Organized by season and data type
- **Version Control Friendly**: JSON files can be tracked in Git
- **Universal Compatibility**: Works with any programming language or tool
- **Easy Processing**: Simple to parse and transform for analysis
- **Incremental Updates**: Can add new data without full file replacement


## Situation Codes and Event Types

### NHL Situation Codes

Situation codes are 4-digit string identifiers that represent the current game situation, including the number of skaters on each team and whether goalies are in net. These codes are essential for understanding game context, power play situations, and goalie pulled scenarios.

#### Format: `away goalie (1=in net, 0=pulled)-away skaters-home skaters-home goalie (1=in net, 0=pulled)`

Based on actual NHL API data analysis, the following situation codes are commonly found:

- **1551**: Even Strength 5v5 (Both goalies in net, 5 skaters each)
  - Format: 1-5-5-1
  - Description: "Even Strength 5v5"
  - Strength Situation: "even"

- **1451**: Home Power Play 4v5 (Home team has power play advantage)
  - Format: 1-4-5-1
  - Description: "Home Power Play 4v5"
  - Strength Situation: "power_play" (home team)

- **1351**: Away Penalty Kill 3v5 (Away team shorthanded)
  - Format: 1-3-5-1
  - Description: "Away Penalty Kill 3v5"
  - Strength Situation: "penalty_kill" (away team)

- **1651**: 4v4 Situation (Both teams have penalties)
  - Format: 1-6-5-1
  - Description: "4v4 Situation"
  - Strength Situation: "even"

- **1751**: 3v3 Situation (Overtime or special circumstances)
  - Format: 1-7-5-1
  - Description: "3v3 Situation"
  - Strength Situation: "even"

### Play-by-Play Event Codes

#### Game Flow Events (520-599 Series)
- **520**: Period Start - Marks the beginning of a period
- **521**: Period End - Marks the end of a period
- **524**: Game End - Marks the end of the game
- **516**: Stoppage - Play stoppage (whistle, timeout, etc.)
- **535**: Delayed Penalty - Delayed penalty situation

#### Player Action Events (500-599 Series)
- **502**: Faceoff
  - Details: `winningPlayerId`, `losingPlayerId`, `xCoord`, `yCoord`, `zoneCode`
  - Zone Codes: "O" (Offensive), "D" (Defensive), "N" (Neutral)

- **503**: Hit
  - Details: `playerId` (delivering hit), `xCoord`, `yCoord`

- **504**: Giveaway
  - Details: `playerId` (committing giveaway), `xCoord`, `yCoord`

- **505**: Goal
  - Details: `playerId` (scorer), `shotType`, `goalModifier`, `assists`
  - Shot Types: "wrist", "slap", "backhand", "deflection", "tip-in"
  - Goal Modifiers: "none", "empty-net", "power-play", "short-handed"

- **506**: Shot on Goal
  - Details: `playerId` (shooter), `shotType`, `goalieId`

- **507**: Missed Shot
  - Details: `playerId` (shooter), `shotType`, `missedNet`
  - Missed Net Types: "wide", "over", "post", "crossbar"

- **508**: Blocked Shot
  - Details: `playerId` (shooter), `blockingPlayerId`, `shotType`

- **509**: Penalty
  - Details: `playerId` (penalized), `penaltyMinutes`, `penaltyCode`, `drawnBy`
  - Penalty Codes: "hooking", "tripping", "slashing", "roughing", etc.

- **525**: Takeaway
  - Details: `playerId` (taking away possession), `xCoord`, `yCoord`

- **537**: Penalty Shot Missed
  - Details: `shootingPlayerId`, `goalieInNetId`

### Stoppage Reasons
- icing
- goalie-stopped-after-sog
- puck-in-crowd
- puck-in-netting
- offside
- puck-in-benches
- puck-frozen
- tv-timeout
- high-stick
- net-dislodged-defensive-skater
- player-injury
- video-review
- referee-or-linesman
- clock-problem
- hand-pass
- objects-on-ice
- goalie-puck-frozen-played-from-beyond-center
- visitor-timeout
- net-dislodged-offensive-skater
- chlg-hm-goal-interference
- chlg-vis-goal-interference
- chlg-hm-missed-stoppage
- skater-puck-frozen
- ice-scrape
- chlg-league-goal-interference
- player-equipment
- chlg-hm-off-side
- chlg-vis-off-side
- chlg-hm-missed-stoppage
- home-timeout
- chlg-vis-missed-stoppage
- puck-in-penalty-benches
- ice-problem
- net-dislodged-by-goaltender
- rink-repair
- chlg-league-missed-stoppage
- official-injury
- chlg-hm-puck-over-glass
- premature-substitution
- chlg-league-off-side
- switch-sides

## Statistical Categories

### Team Statistics
- win/loss
- faceoff_taken/faceoff_won
- shot_attempt/shot_missed/shot_blocked/shot_on_goal/shot_saved
- shot_missed_shootout
- goal/goal_against
- giveaways/takeaways
- hit_another_player/hit_by_player
- penalties/penalties_served/penalties_drawn
- penalty_shot/penalty_shot_goal/penalty_shot_saved
- penalties_duration

### Player Statistics
- toi (time on ice)
- faceoff_taken/faceoff_won
- shot_attempt/shot_missed/shot_blocked/shot_on_goal/shot_saved
- shot_missed_shootout
- goal/assist/point
- goal_against
- giveaways/takeaways
- hit_another_player/hit_by_player
- penalties/penalties_served/penalties_drawn
- penalty_shot/penalty_shot_goal/penalty_shot_saved
- penalties_duration

### Player Pair Statistics
- toi (time on ice together)
- faceoff_taken/faceoff_won
- shot_on_goal/shot_saved
- goal/assist
- hit_another_player/hit_by_player
- penalties_duration

## Historical Windows

The repository calculates statistics over multiple historical windows:
- 5 games
- 7 games
- 10 games
- 20 games
- 40 games
- 82 games (full season)

## Data Curation Process

### 1. Game Processing
- Process game events chronologically
- Extract player shifts and on-ice combinations
- Calculate player interaction statistics
- Validate statistics against official totals

### 2. Period Breakdown
All statistics are tracked across three periods:
- Regulation (periods 1-3)
- Overtime (if applicable)
- Shootout (if applicable)

### 3. Player Chemistry
- Track which players are on ice together
- Calculate combined statistics for player pairs
- Analyze player interaction effectiveness

## Graph Structure

The repository builds a complex graph structure with:

### Node Types
- **Game Nodes**: Individual hockey games
- **Team Nodes**: Hockey teams
- **Player Nodes**: Individual players
- **Team Game Performance (TGP)**: Team statistics for specific games
- **Player Game Performance (PGP)**: Player statistics for specific games

### Edge Types
- Team-Game edges: Connect teams to games
- Player-Game edges: Connect players to their game performances
- Player-Player edges: Model on-ice chemistry between players
- Historical connections: Link performances across time

## Configuration Parameters

### Data Collection Flags
- `reload_seasons`: Force reload season data
- `reload_teams`: Force reload team data
- `reload_games`: Force reload game schedules
- `update_game_statuses`: Update game statuses for past games
- `reload_boxscores`: Force reload boxscore data
- `reload_players`: Force reload player data
- `reload_playernames`: Force reload player names
- `reload_playbyplay`: Force reload play-by-play data
- `reload_rosters`: Force reload roster data
- `reload_curate`: Force reload curated data

### Processing Parameters
- `season_count`: Number of seasons to process
- `max_workers`: Number of parallel workers
- `delete_files`: Delete existing data files
- `verbose`: Enable verbose logging
- `produce_csv`: Generate CSV output files

## Error Handling

### Common Issues
1. **API Rate Limiting**: Implement delays between requests
2. **Missing Data**: Handle games with incomplete statistics
3. **Future Games**: Skip games that haven't been played
4. **Postponed Games**: Handle rescheduled games
5. **Player Injuries**: Handle players who don't play in games

### Data Validation
- Validate statistics against official totals
- Check for missing required fields
- Verify player roster consistency
- Ensure chronological order of events

## Performance Optimization

### Parallel Processing
- Use ThreadPoolExecutor for I/O-bound API requests
- Use ProcessPoolExecutor for CPU-bound data processing
- Batch processing for large datasets
- Incremental updates to avoid reprocessing

### Caching Strategy
- Cache API responses to minimize redundant requests
- Store processed data in CSV files for human-readable access
- Implement selective reloading based on configuration
- Use incremental updates for new data with CSV append operations
- Maintain data lineage with `last_updated` timestamps in all CSV files
- Implement data validation and integrity checks on CSV data

## Output Formats

### Primary CSV Output
- **Seasons Data**: Complete season information and metadata
- **Teams Data**: Team rosters, standings, and statistics
- **Games Data**: Game schedules, results, and metadata
- **Players Data**: Player information, statistics, and game performance
- **Events Data**: Play-by-play events and shift data
- **Statistics Data**: Aggregated team and player statistics
- **Curated Data**: Processed and validated datasets for analysis

### Secondary Output Formats
- **JSON Output**: Raw API responses and intermediate data
- **Graph Output**: NetworkX graph objects for GNN modeling
- **Database Output**: SQLite/PostgreSQL compatible schemas
- **Visualization Output**: Charts, graphs, and analysis reports

### Data Export Options
- **CSV Files**: Primary storage format (human-readable, version-controlled)
- **JSON Files**: API responses and complex nested data
- **Database**: SQL databases for complex queries and relationships
- **Graph Files**: NetworkX pickle files for graph analysis
- **Reports**: PDF/HTML reports with visualizations and insights

This comprehensive data structure enables the extraction and processing of all statistics and supplementary datasets required for the NHL hockey game prediction model. The enhanced documentation now includes:

- **HTML Report Integration**: Comprehensive game reports with detailed statistics
- **Situation Code Analysis**: Complete understanding of game contexts and power play situations
- **Enhanced Event Types**: Detailed event codes with specific data structures
- **Type-Safe Models**: Pydantic models for data validation and type safety
- **Advanced Data Structures**: Support for both legacy and modern data formats

This merged approach combines the graph-based prediction capabilities of the original NHLapiV3 project with the comprehensive API coverage and type safety of the nhl_apimdc project, providing a complete foundation for advanced hockey analytics and machine learning applications. The CSV-based data storage approach ensures data accessibility, version control compatibility, and universal tool integration while maintaining the sophisticated analysis capabilities of the original system.

## Testing Results and Lessons Learned

### HTML Report Availability Testing
Comprehensive testing of the 2024-2025 season revealed important findings about HTML report availability:

#### Available Report Types (9/9)
- ✅ **Game Summary (GS)**: Available for all games
- ✅ **Event Summary (ES)**: Available for all games  
- ✅ **Play-by-Play (PL)**: Available for all games
- ✅ **Faceoff Summary (FS)**: Available for all games
- ✅ **Faceoff Comparison (FC)**: Available for all games
- ✅ **Rosters (RO)**: Available for all games
- ✅ **Shot Summary (SS)**: Available for all games
- ✅ **Time on Ice Away (TV)**: Available for all games
- ✅ **Time on Ice Home (TH)**: Available for all games

#### Additional Time on Ice Sources
- ✅ **Shift Charts**: Available for all games
  - **URL**: `https://www.nhl.com/stats/shiftcharts?id={gameId}`
  - **Content**: Contains comprehensive Time on Ice data in HTML format
  - **Success Rate**: 100% for tested games

### Collection Performance Metrics
Based on testing of 1,312 regular season games:

| Data Type | Success Rate | Failed Games | Notes |
|-----------|--------------|--------------|-------|
| Boxscores | 93.2% | 89 games | Temporary API issues |
| Play-by-Play | 95.0% | 65 games | Network timeouts |
| HTML Reports | 100% | 0 games | All 9 available types (GS, ES, PL, FS, FC, RO, SS, TV, TH) |
| Shift Charts | 100% | 0 games | Reliable Time on Ice source |

### Key Testing Insights

1. **TOI Reports Use TV/TH Codes**: Time on Ice reports use TV (Away) and TH (Home) codes, not TO codes
2. **TV/TH Reports Available**: Both TV and TH reports are accessible with 100% availability
3. **Shift Charts are Reliable**: Shift Charts provide comprehensive Time on Ice data with 100% availability
4. **High Success Rates**: Overall collection success rate of 94.1% demonstrates system reliability
5. **Retry Logic Effective**: Failed collections are typically due to temporary issues and succeed on retry
6. **Rate Limiting Works**: Conservative rate limiting (1s delay, max 2 concurrent) ensures API stability

### Recommendations from Testing

1. **Update TOI Collection**: Use TV/TH reports for Time on Ice data (TV for away team, TH for home team)
2. **Implement Retry Logic**: Add automatic retry for failed collections
3. **Monitor Collection Health**: Track success rates and alert on significant drops
4. **Focus on Available Reports**: All 9 HTML report types (GS, ES, PL, FS, FC, RO, SS, TV, TH) are working
5. **Maintain Conservative Rate Limits**: Current settings provide good balance of speed and reliability
description:
globs:
alwaysApply: true
---
